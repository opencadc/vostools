#!/usr/bin/env python2.7

"""A FUSE based filesystem view of VOSpace."""

import sys
from sys import platform
import optparse
import os
import logging

import vos
import vos.fuse
from vos.fuse import FUSE
from vos.__version__ import version
from vos.vofs import VOFS
DAEMON_TIMEOUT = 60
 

if __name__ == "__main__":
    #usage="%prog <root> <mountpoint>"


    parser = optparse.OptionParser(description='mount vospace as a filesystem.')

    parser.add_option("--vospace", help="the VOSpace to mount", default="vos:")
    parser.add_option("--mountpoint",
	    help="the mountpoint on the local filesystem",
	    default="/tmp/vospace")
    parser.add_option("--version", action="store_true",
	    default=False, help="Print the version (%s)" % ( version))
    parser.add_option("-d", "--debug", action="store_true")
    parser.add_option("-v", "--verbose", action="store_true")
    parser.add_option("--warning", action="store_true", default=False,
	    help="Print warning level log messages" )
    parser.add_option("-f", "--foreground", action="store_true", 
	    help="Mount the filesystem as a foreground opperation and " + 
	    "produce copious amounts of debuging information")
    parser.add_option("--log", action="store", 
	    help="File to store debug log to", default="/tmp/vos.err")
    parser.add_option("--cache_limit", action="store", type=int, 
	    help="upper limit on local diskspace to use for file caching",
	    default=50*2**(10+10+10))
    parser.add_option("--cache_dir", action="store", 
	    help="local directory to use for file caching", default=None)
    parser.add_option("--certfile", 
	    help="location of your CADC security certificate file",
	    default=os.path.join(os.getenv("HOME", "."), ".ssl/cadcproxy.pem"))
    parser.add_option("--readonly", action="store_true", 
	    help="mount vofs readonly", default=False)
    parser.add_option("--cache_nodes", action="store_true", default=False, 
	    help="cache dataNode properties, containerNodes are not cached")
    parser.add_option("--allow_other", action="store_true", default=False, 
	    help="Allow all users access to this mountpoint")

    parser.version = version
    (opt, args)=parser.parse_args()
    if opt.version:
        parser.print_version()
        sys.exit(0)



    if opt.verbose:
        log_level = logging.INFO
    elif opt.debug:
        log_level = logging.DEBUG
    elif opt.warning:
        log_level = logging.WARNING
    else:
        log_level = logging.ERROR

    format = ("%(asctime)s %(thread)d vos-"+str(version)+
	    " %(module)s.%(funcName)s.%(lineno)d %(message)s")
    logging.basicConfig(level=log_level, format=format,
	    filename=os.path.abspath(opt.log))

    logging.getLogger('vos').addHandler(logging.StreamHandler())

    logging.debug("Checking connection to VOSpace ")
    if not os.access(opt.certfile, os.F_OK):
        certfile=None
    else:
        certfile=opt.certfile
    conn=vos.Connection(certfile=os.path.abspath(certfile))
    logging.debug("Got a certificate, connections should work")

    root = opt.vospace
    mount = os.path.abspath(opt.mountpoint)
    if opt.cache_dir is None:
        opt.cache_dir=os.path.normpath(os.path.join(
		os.getenv('HOME', default='.'), root.replace(":", "_")))
    if not os.access(mount, os.F_OK):
        os.makedirs(mount)
    if platform=="darwin":
        fuse = FUSE(VOFS(root, opt.cache_dir, opt, conn=conn, 
		cache_limit=opt.cache_limit, cache_nodes=opt.cache_nodes), 
		    mount,
                    fsname=root,
                    volname=root,
                    defer_permissions=True,
                    daemon_timeout=DAEMON_TIMEOUT,
                    readonly=opt.readonly,
                    #auto_cache=True,
                    allow_other=opt.allow_other,
                    noapplexattr=True,
                    noappledouble=True,
                    foreground=opt.foreground)
    else:
        fuse = FUSE(VOFS(root, opt.cache_dir, opt, conn=conn, 
		cache_limit=opt.cache_limit, cache_nodes=opt.cache_nodes), mount,
                    fsname=root,
                    readonly=opt.readonly,
                    allow_other=opt.allow_other,
                    #auto_cache=True,
                    foreground=opt.foreground)

