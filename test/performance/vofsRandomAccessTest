#!/bin/bash

thisDir=${0%/*}
if [ "$thisDir" = "mfs_free_space_test" ]
then
    thisDir=.
fi

referencefs=$1
offsets="0 5000 200000 10000"
echo "seek pattern (KB): $offsets"
echo "seek test times are in us, and the values in the row are:"
echo "   time to open the file"
echo "   times to do each of the seeks"
echo "   time to close the file"
echo "wc times are in seconds."

testDirectory=/tmp/$USER/vofsRandomAccessTest
mountPoint=$testDirectory/mount
cacheDir=$testDirectory/cache
logDir=$testDirectory/vofs.log

# Make sure the media is not mounted, ignoring any errors
fusermount -u $mountPoint &> /dev/null
rm -r $testDirectory &> /dev/null

if [ "$referencefs" == "" ]
then
    referencefs=$testDirectory/reference
    mkdir -p $referencefs &> /dev/null
fi
testFile=700000o.fits.fz
vospace=vos://cadc.nrc.ca~vospace/CADCAuthtest1

mountCmd="mountvofs --certfile=$A/test-certificates/x509_CADCAuthtest1.pem \
	--cache_dir=$cacheDir --mountpoint=$mountPoint --readonly \
	--vospace=$vospace --cache_nodes --log=$logDir" 
echo "$mountCmd"



# Create the mount point if necessary
mkdir -p $mountPoint

# Clear the cache
rm -r $cacheDir >& /dev/null

prefix=vofs:
# Mount the test file system
# echo "Mount: $(date)"
$mountCmd &> /dev/null &
sleep 5

# Run the seek tests
echo "$prefix initial seeks: $(date)"
r1=$($thisDir/vofsRandomAccessSeeks.py --size=20 --offsets="$offsets" \
	--fileName=$mountPoint/$testFile)
results="$prefix initial seeks: $r1"

echo "$prefix wc after initial seek: $(date)"
r1=$(/usr/bin/time -f "$prefix"' wc after initial seek: %e' wc -w $mountPoint/$testFile 2>&1 > /dev/null )
results="$results 
$r1"

echo "$prefix second wc after initial seek: $(date)"
r1=$(/usr/bin/time -f "$prefix"' wc after initial seek: %e' wc -w $mountPoint/$testFile 2>&1 > /dev/null )
results="$results 
$r1"

# Run the seek tests again
echo "$prefix primed cache seeks: $(date)"
r1=$($thisDir/vofsRandomAccessSeeks.py --size=20 --offsets="$offsets" \
	--fileName=$mountPoint/$testFile)
results="$results 
$prefix primed cache seeks: $r1"


# Clear the cache
echo "$prefix clear cache: $(date)"
sleep 5
fusermount -u $mountPoint 
rm -r $cacheDir
echo "$prefix mount: $(date)"
$mountCmd 
sleep 5

echo "$prefix wc on cleared cache: $(date)"
r1=$(/usr/bin/time -f "$prefix"' wc after cleared cache: %e' wc -w $mountPoint/$testFile 2>&1 > /dev/null )
results="$results 
$r1"

echo "$prefix done: $(date)"
# Clear the cache
sleep 5
fusermount -u $mountPoint 
rm -r $cacheDir

$mountCmd 
sleep 5
prefix=parallel
# Do a multi threaded test
r1=$(/usr/bin/time -f  "$prefix"' parallel reads: %e' parallel.py --numThreads=4 2>&1 > /dev/null << EOF

$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
EOF
)
results="$results 
$r1"

wc -w $mountPoint/$testFile &> /dev/null

# Do a multi threaded test
r1=$(/usr/bin/time -f  "$prefix"' parallel reads with initialized cache: %e' parallel.py --numThreads=4 2>&1 > /dev/null << EOF

$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$mountPoint/$testFile
EOF
)
results="$results 
$r1"


echo "$prefix done: $(date)"
# Clear the cache
sleep 5
fusermount -u $mountPoint 
rm -r $cacheDir


# Set up the reference file
prefix="ref"
/usr/cadc/local/scripts/vcp --certfile=$A/test-certificates/x509_CADCAuthtest1.pem \
	$vospace/$testFile $referencefs
echo vcp --certfile=$A/test-certificates/x509_CADCAuthtest1.pem \
	$vospace/$testFile $referencefs

# Repeat the seek test on the reference disk
r1=$($thisDir/vofsRandomAccessSeeks.py --size=20 --offsets="$offsets" \
	--fileName=$referencefs/$testFile)
results="$results 
$prefix reference seeks: $r1"

# Clear the os cache
sync
#sudo /sbin/sysctl -w vm.drop_caches=1
sleep 5

# Repeat the seek test on the reference disk
r1=$($thisDir/vofsRandomAccessSeeks.py --size=20 --offsets="$offsets" \
	--fileName=$referencefs/$testFile)
results="$results 
$prefix cleared-cache reference seeks: $r1"

r1=$(/usr/bin/time -f "$prefix"' wc: %e' wc -w $referencefs/$testFile 2>&1 > /dev/null )
results="$results 
$r1"

r1=$(/usr/bin/time -f "$prefix"' wc: %e' wc -w $referencefs/$testFile 2>&1 > /dev/null )
results="$results 
$r1"


# Clear the os cache
sync
#sudo /sbin/sysctl -w vm.drop_caches=1
sleep 5

prefix=parallel
# Do a multi threaded test
r1=$(/usr/bin/time -f  "$prefix"' reference parallel reads: %e' parallel.py --numThreads=4 2>&1 > /dev/null << EOF

$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
EOF
)
results="$results 
$r1"
wc -w $referencefs/$testFile &> /dev/null
r1=$(/usr/bin/time -f  "$prefix"' reference parallel reads initialized cache: %e' parallel.py --numThreads=4 2>&1 > /dev/null << EOF

$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
$thisDir/vofsRandomAccessSeeks.py --size=20 --random=500 --delay=.001 --fileName=$referencefs/$testFile
EOF
)
results="$results 
$r1"


rm -r $testDirectory
echo "${results}"
